# -*- coding: utf-8 -*-
#
import subprocess
import os
import os.path

from i3pystatus import Status

from i3pystatus.weather import weathercom
from i3pystatus.updates import pacman, cower

## Prog Variable
terminal   ="elokab-terminal"
filemanager="pcmanfm"

## Colors Variable
updatesFColor=  '#CA4932'
forColor     =  '#b289ab'

clockColor  =  '#9D6A47'
clockFColor  =  '#b289ab'

alsaColor =     '#315035'
alsaFColor=     '#b289ab'

backlightColor ='#95772C'
backlightFColor='#b289ab'

networkColor =  '#44673B'
networkFColor=  '#b289ab'

batteryColor =  '#956C2C'
batteryFColor=  '#b289ab'

tempColor =     '#BA2F9B'
tempFColor=     '#b289ab'

cpuColor =      '#95612C'
cpuFColor=      '#b289ab'

memColor =      '#78824B'
memFColor=      '#b289ab'

diskColor =     '#95552C'
diskFColor=     '#b289ab'



    
status = Status(logfile='~/i3pystatus.log')
## Menu ----------------------------------------------------------------
status.register("text",
    text = " ",
    ## open my obmenubar
    #on_leftclick = "jgmenu_run",
    on_leftclick = "~/.config/rofi/rofi-sh -R",
    ## open terminal
    on_rightclick = terminal,
)

## Mpd  ----------------------------------------------------------------
status.register("mpd",
    format = "{status}",
    status = {
        "pause": "",
        "play": "",
        "stop": "",
    },

    on_rightclick = "~/.config/rofi/rofi-menu-mpd",
    #on_middleclick = change_server,
    # on_upscroll="mpc seek +00:00:05",
    # on_downscroll="mpc seek -00:00:05",
)

## Updates -------------------------------------------------------------
#status.register("updates",

#    format              = ":{count}",
#    format_no_updates   = "",
#    on_leftclick        =terminal+" -e 'sudo pacman -Syu'",
#    color               =updatesFColor,
#    backends            = [pacman.Pacman(), cower.Cower()]

#)


## CLOCK ---------------------------------------------------------------
status.register("clock",
    hints       = {"markup": "pango"},
    format      = ' %H:%M:%S' ,
    color       = clockFColor,
    interval    =1,
    on_leftclick="zenity --calendar --text ''",
)

## CAL -----------------------------------------------------------------
#status.register("clock",

    #format="  %a %d-%m-%Y ",
    #color='#61AEEE',
    #interval=1,

 #   )


## ALSA SOUND ----------------------------------------------------------
# status.register("alsa",
#
#
#     on_leftclick    = "amixer -D pulse set Master toggle",
#     on_rightclick   = "pavucontrol",
#     color           =alsaFColor,
#     color_muted     = '#E06C75',
#     format          = " {volume}%",
#     format_muted    = ' [muted]',
#
# )

## BACKLIGHT -----------------------------------------------------------
status.register("backlight",

    interval    =5,
    #color       = backlightFColor,
	format     =" {percentage:.0f}%",
    backlight   ="intel_backlight",

)

## WIRRELESS -----------------------------------------------------------
# status.register("network",

#     interface   ="wlp2s0",
#    # color_up   = color,
#     #color_down  =networkFColor,
#    hints      = {"markup": "pango","separator": True},
#     format_up   = "<span color='"+networkFColor+"' \
#                     >{essid} {bytes_recv:6.1f}K {bytes_sent:5.1f}K</span>",
#     format_down = "<span color='"+networkFColor+"' ></span>",
  
#     on_leftclick = "firefox"
    

# )

## BATTERY -------------------------------------------------------------
status.register("battery",

    battery_ident   ="BAT1",
    interval        =2,
    format          ="{status} {percentage:.0f}%",
    alert           =True,
    alert_percentage=45,
    #color           ="#E06E1C" ,
    critical_color  ="#FF1919",
    charging_color  ="#E5E500",
    full_color      =batteryFColor,
    status={
        "DIS": " ",
        "CHR": "  ",
        "FULL": " ",
    },

)

## TEMPIRATURE ---------------------------------------------------------
# status.register("temp",

#     format     = " {temp}°",
#     #color        =tempFColor,
#     #alert_color  = "#FF0000",
#     #alert_temp   = 60,
# )

## DISK USAGE ----------------------------------------------------------
# status.register("disk",
#     color       =diskFColor,
#     path        ="/",
#     on_leftclick=filemanager,
#     format     =" {avail} GB",
# )

## MEMORY --------------------------------------------------------------
status.register("mem",

    color       =memFColor,
    warn_color  ="#E5E500",
    alert_color ="#FF0000s",
    format      =' {percent_used_mem}%',

)

## CPU USAGE -----------------------------------------------------------
status.register("cpu_usage",

	#color          =cpuFColor,
	on_leftclick   =terminal+" -e 'htop'",
    format          = '  {usage}%',

)

## weather  ------------------------------------------------------------
status.register( 'weather',
    format='{current_temp}{temp_unit}[ {icon}][ {update_error}]',
     colorize=False,
     color_icons = {
	 'Fair': ('☼ معتدل', '#ffcc00'),
	 'Cloudy': ('☁ غائم', '#f8f8ff'),
	 'Partly Cloudy': ('☁ غائم جزئيا', '#844747'),
	 'Fog': (' الضباب', '#949494'),
	 'Sunny': ('☀ مشمس', '#ffff00'),
	 'default': ('', None),
	 'Rainy': ('⛈ ممطر', '#cbd2c0'),
	 'Thunderstorm': ('⚡ عاصفة رعدية', '#cbd2c0'),
	 'Snow': ('☃ ثلج', '#ffffff'),
	  },

    hints={'markup': 'pango'},

    backend=weathercom.Weathercom(
        location_code='AGXX0001:1:AG',
        units='metric',
        ),
)

## window_title  -------------------------------------------------------
#status.register("window_title",
    #command ="xdotool getactivewindow getwindowname" ,
 #   max_width =30,
#)

status.run()
